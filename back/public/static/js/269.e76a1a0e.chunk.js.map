{"version":3,"file":"static/js/269.e76a1a0e.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/wallet-connect-v1-adapter/src/config.ts","../node_modules/@web3auth/wallet-connect-v1-adapter/src/walletConnectV1adapter.ts"],"sourcesContent":["import { CHAIN_NAMESPACES, IWalletConnectExtensionAdapter } from \"@web3auth/base\";\n\nexport const WALLET_CONNECT_EXTENSION_ADAPTERS: IWalletConnectExtensionAdapter[] = [\n  {\n    name: \"Rainbow\",\n    chains: [CHAIN_NAMESPACES.EIP155],\n    logo: \"https://images.web3auth.io/login-rainbow.svg\",\n    mobile: {\n      native: \"rainbow:\",\n      universal: \"https://rnbwapp.com\",\n    },\n    desktop: {\n      native: \"\",\n      universal: \"\",\n    },\n  },\n  {\n    name: \"MetaMask\",\n    chains: [CHAIN_NAMESPACES.EIP155],\n    logo: \"https://images.web3auth.io/login-metamask.svg\",\n    mobile: {\n      native: \"metamask:\",\n      universal: \"https://metamask.app.link\",\n    },\n    desktop: {\n      native: \"\",\n      universal: \"\",\n    },\n  },\n];\n","import WalletConnect from \"@walletconnect/client\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletConnectV1Data,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { WalletConnectProvider } from \"@web3auth/ethereum-provider\";\n\nimport { WALLET_CONNECT_EXTENSION_ADAPTERS } from \"./config\";\nimport { WalletConnectV1AdapterOptions } from \"./interface\";\n\nclass WalletConnectV1Adapter extends BaseAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.WALLET_CONNECT_V1;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly adapterOptions: WalletConnectV1AdapterOptions;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public adapterData: WalletConnectV1Data = {\n    uri: \"\",\n    extensionAdapters: WALLET_CONNECT_EXTENSION_ADAPTERS,\n  };\n\n  public connector: WalletConnect | null = null;\n\n  private wcProvider: WalletConnectProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(options: WalletConnectV1AdapterOptions = {}) {\n    super();\n    this.adapterOptions = { ...options };\n    this.chainConfig = options.chainConfig || null;\n  }\n\n  get connected(): boolean {\n    return !!this.connector?.connected;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.wcProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    }\n    // Create a connector\n    this.connector = this.getWalletConnectInstance();\n    this.wcProvider = new WalletConnectProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig }, connector: this.connector });\n\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V1);\n    this.status = ADAPTER_STATUS.READY;\n    log.debug(\"initializing wallet connect v1 adapter\");\n    if (this.connector.connected) {\n      this.rehydrated = true;\n      await this.onConnectHandler({ accounts: this.connector.accounts, chainId: this.connector.chainId });\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n\n    if (this.connected) {\n      await this.onConnectHandler({ accounts: this.connector.accounts, chainId: this.connector.chainId });\n      return this.provider;\n    }\n\n    if (this.status !== ADAPTER_STATUS.CONNECTING) {\n      // for wallet connect qr code modal we have to create a new connector, coz wallet connect internally does not open\n      // modal again on existing instance if connection is pending.\n      if (this.adapterOptions.adapterSettings?.qrcodeModal) {\n        this.connector = this.getWalletConnectInstance();\n        this.wcProvider = new WalletConnectProvider({\n          config: {\n            chainConfig: this.chainConfig as CustomChainConfig,\n            // network switching can be skipped with custom ui\n            skipLookupNetwork: this.adapterOptions.adapterSettings?.skipNetworkSwitching,\n          },\n          connector: this.connector,\n        });\n      }\n      await this.createNewSession();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1 });\n    }\n    return new Promise((resolve, reject) => {\n      if (!this.connector) return reject(WalletInitializationError.notReady(\"Wallet adapter is not ready yet\"));\n      // for wallet connect default modal.\n      this.connector.on(\"modal_closed\", async () => {\n        this.status = ADAPTER_STATUS.READY;\n        this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V1);\n        return reject(new Error(\"User closed modal\"));\n      });\n      try {\n        // Subscribe to session connection\n        this.connector.on(\"connect\", async (error: Error | null, payload: { params: { accounts: string[]; chainId: number }[] }) => {\n          if (error) {\n            this.emit(ADAPTER_EVENTS.ERRORED, error);\n          }\n          log.debug(\"connected event emitted by web3auth\");\n          await this.onConnectHandler(payload.params[0]);\n          return resolve(this.provider);\n        });\n      } catch (error: unknown) {\n        log.error(\"Wallet connect v1 adapter error while connecting\", error);\n        // ready again to be connected\n        this.status = ADAPTER_STATUS.READY;\n        this.rehydrated = true;\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n        reject(\n          error instanceof Web3AuthError\n            ? error\n            : WalletLoginError.connectionError(`Failed to login with wallet connect: ${(error as Error)?.message || \"\"}`)\n        );\n      }\n    });\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.connected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    const { cleanup } = options;\n    if (!this.connector || !this.connected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    await this.connector.killSession();\n    this.rehydrated = false;\n    if (cleanup) {\n      this.connector = null;\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.wcProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  private async addChain(chainConfig: CustomChainConfig): Promise<void> {\n    try {\n      if (!this.wcProvider) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n      const networkSwitch = this.adapterOptions.adapterSettings?.networkSwitchModal;\n      if (networkSwitch) {\n        await networkSwitch.addNetwork({ chainConfig, appOrigin: window.location.hostname });\n      }\n      await this.wcProvider.addChain(chainConfig);\n    } catch (error) {\n      log.error(error);\n    }\n  }\n\n  private async switchChain(connectedChainConfig: Partial<CustomChainConfig>, chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.wcProvider) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    const networkSwitch = this.adapterOptions.adapterSettings?.networkSwitchModal;\n\n    if (networkSwitch) {\n      await networkSwitch.switchNetwork({\n        currentChainConfig: chainConfig,\n        newChainConfig: connectedChainConfig,\n        appOrigin: window.location.hostname,\n      });\n    }\n    await this.wcProvider.switchChain({ chainId: chainConfig.chainId, lookup: false, addChain: false });\n  }\n\n  private async createNewSession(opts: { forceNewSession: boolean } = { forceNewSession: false }): Promise<void> {\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    if (opts.forceNewSession && this.connector.pending) {\n      await this.connector.killSession();\n    }\n    // for wallet connect qr modal\n    if (this.adapterOptions?.adapterSettings?.qrcodeModal) {\n      await this.connector.createSession({ chainId: parseInt(this.chainConfig?.chainId || \"0x1\", 16) });\n      return;\n    }\n\n    // for web3auth qr code modal\n    return new Promise<void>((resolve, reject) => {\n      if (!this.connector) return reject(WalletInitializationError.notReady(\"Wallet adapter is not ready yet\"));\n      log.debug(\"creating new session for web3auth wallet connect\");\n      this.connector.on(\"display_uri\", async (err, payload) => {\n        if (err) {\n          this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.connectionError(\"Failed to display wallet connect qr code\"));\n          return reject(err);\n        }\n        const uri = payload.params[0];\n        this.updateAdapterData({ uri, extensionAdapters: WALLET_CONNECT_EXTENSION_ADAPTERS } as WalletConnectV1Data);\n\n        this.connector?.off(\"display_uri\");\n        return resolve();\n      });\n\n      this.connector.createSession({ chainId: parseInt(this.chainConfig?.chainId || \"0x1\", 16) }).catch((error) => {\n        log.error(\"error while creating new wallet connect session\", error);\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n        return reject(error);\n      });\n    });\n  }\n\n  private async onConnectHandler(params: { accounts: string[]; chainId: number }) {\n    if (!this.connector || !this.wcProvider) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"Chain config is not set\");\n\n    const { chainId } = params;\n    log.debug(\"connected chainId in hex\");\n    if (chainId !== parseInt(this.chainConfig.chainId, 16)) {\n      const connectedChainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, chainId) || {\n        chainId: `0x${chainId.toString(16)}`,\n        displayName: \"Unknown Network\",\n      };\n\n      const isCustomUi = this.adapterOptions.adapterSettings?.qrcodeModal;\n      // skipping network is not allowed in default ui. We are use network switching modal for default ui.\n      if (!isCustomUi || (isCustomUi && !this.adapterOptions?.adapterSettings?.skipNetworkSwitching)) {\n        try {\n          await this.addChain(this.chainConfig);\n          await this.switchChain(connectedChainConfig, this.chainConfig);\n          this.connector = this.getWalletConnectInstance();\n        } catch (error) {\n          log.error(\"error while chain switching\", error);\n          // we need to create a new session since old session is already used and\n          // user needs to login again with correct chain with new qr code.\n          await this.createNewSession({ forceNewSession: true });\n          this.emit(\n            ADAPTER_EVENTS.ERRORED,\n            WalletInitializationError.fromCode(\n              5000,\n              `Not connected to correct network. Expected: ${this.chainConfig.displayName}, Current: ${\n                connectedChainConfig?.displayName || chainId\n              }, Please switch to correct network from wallet`\n            )\n          );\n          this.status = ADAPTER_STATUS.READY;\n          this.rehydrated = true;\n          return;\n        }\n      }\n    }\n    await this.wcProvider.setupProvider(this.connector);\n    this.subscribeEvents(this.connector);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n  }\n\n  private subscribeEvents(connector: WalletConnect): void {\n    connector.on(\"session_update\", async (error: Error | null) => {\n      if (error) {\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n      }\n    });\n  }\n\n  private getWalletConnectInstance(): WalletConnect {\n    const walletConnectOptions = this.adapterOptions.adapterSettings || {};\n    walletConnectOptions.bridge = walletConnectOptions.bridge || \"https://bridge.walletconnect.org\";\n    // Create a connector\n    return new WalletConnect(walletConnectOptions);\n  }\n}\n\nexport { WalletConnectV1Adapter };\n"],"names":["WALLET_CONNECT_EXTENSION_ADAPTERS","name","chains","CHAIN_NAMESPACES","logo","mobile","native","universal","desktop","WalletConnectV1Adapter","constructor","options","_defineProperty","WALLET_ADAPTERS","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","ADAPTER_STATUS","uri","extensionAdapters","adapterOptions","chainConfig","this","connector","connected","provider","wcProvider","_","Error","getChainConfig","getWalletConnectInstance","WalletConnectProvider","config","emit","ADAPTER_EVENTS","status","log","rehydrated","onConnectHandler","accounts","chainId","WalletInitializationError","adapterSettings","_this$adapterOptions$","qrcodeModal","skipLookupNetwork","_this$adapterOptions$2","skipNetworkSwitching","createNewSession","adapter","Promise","resolve","reject","on","error","payload","params","Web3AuthError","WalletLoginError","message","cleanup","killSession","networkSwitch","_this$adapterOptions$3","networkSwitchModal","addNetwork","appOrigin","window","location","hostname","addChain","connectedChainConfig","_this$adapterOptions$4","switchNetwork","currentChainConfig","newChainConfig","switchChain","lookup","opts","forceNewSession","pending","createSession","parseInt","_this$chainConfig","err","updateAdapterData","off","_this$chainConfig2","catch","toString","displayName","isCustomUi","_this$adapterOptions2","_this$adapterOptions3","concat","setupProvider","subscribeEvents","reconnected","walletConnectOptions","bridge","WalletConnect","BaseAdapter"],"sourceRoot":""}