{"version":3,"file":"static/js/938.1e2ab446.chunk.js","mappings":"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","sources":["../../src/classes.ts","../../src/error-constants.ts","../../src/errors.ts","../../src/index.ts","../../src/utils.ts","../node_modules/@toruslabs/solana-embed/node_modules/is-stream/index.js","../node_modules/@toruslabs/solana-embed/src/messages.ts","../node_modules/@toruslabs/solana-embed/src/interfaces.ts","../node_modules/@toruslabs/solana-embed/src/config.ts","../node_modules/@toruslabs/solana-embed/src/loglevel.ts","../node_modules/@toruslabs/solana-embed/src/utils.ts","../node_modules/@toruslabs/solana-embed/src/baseProvider.ts","../node_modules/@toruslabs/solana-embed/src/embedUtils.ts","../node_modules/@toruslabs/solana-embed/src/PopupHandler.ts","../node_modules/@toruslabs/solana-embed/src/communicationProvider.ts","../node_modules/@toruslabs/solana-embed/src/inPageProvider.ts","../node_modules/@toruslabs/solana-embed/src/siteMetadata.ts","../node_modules/@toruslabs/solana-embed/src/embed.ts","../node_modules/@web3auth/torus-solana-adapter/src/solanaWalletAdapter.ts","../node_modules/fast-deep-equal/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EthereumProviderError = exports.EthereumRpcError = void 0;\nconst fast_safe_stringify_1 = require(\"fast-safe-stringify\");\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP-1474.\n * Permits any integer error code.\n */\nclass EthereumRpcError extends Error {\n    constructor(code, message, data) {\n        if (!Number.isInteger(code)) {\n            throw new Error('\"code\" must be an integer.');\n        }\n        if (!message || typeof message !== 'string') {\n            throw new Error('\"message\" must be a nonempty string.');\n        }\n        super(message);\n        this.code = code;\n        if (data !== undefined) {\n            this.data = data;\n        }\n    }\n    /**\n     * Returns a plain object with all public class properties.\n     */\n    serialize() {\n        const serialized = {\n            code: this.code,\n            message: this.message,\n        };\n        if (this.data !== undefined) {\n            serialized.data = this.data;\n        }\n        if (this.stack) {\n            serialized.stack = this.stack;\n        }\n        return serialized;\n    }\n    /**\n     * Return a string representation of the serialized error, omitting\n     * any circular references.\n     */\n    toString() {\n        return fast_safe_stringify_1.default(this.serialize(), stringifyReplacer, 2);\n    }\n}\nexports.EthereumRpcError = EthereumRpcError;\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nclass EthereumProviderError extends EthereumRpcError {\n    /**\n     * Create an Ethereum Provider JSON-RPC error.\n     * `code` must be an integer in the 1000 <= 4999 range.\n     */\n    constructor(code, message, data) {\n        if (!isValidEthProviderCode(code)) {\n            throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n        }\n        super(code, message, data);\n    }\n}\nexports.EthereumProviderError = EthereumProviderError;\n// Internal\nfunction isValidEthProviderCode(code) {\n    return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\nfunction stringifyReplacer(_, value) {\n    if (value === '[Circular]') {\n        return undefined;\n    }\n    return value;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.errorValues = exports.errorCodes = void 0;\nexports.errorCodes = {\n    rpc: {\n        invalidInput: -32000,\n        resourceNotFound: -32001,\n        resourceUnavailable: -32002,\n        transactionRejected: -32003,\n        methodNotSupported: -32004,\n        limitExceeded: -32005,\n        parse: -32700,\n        invalidRequest: -32600,\n        methodNotFound: -32601,\n        invalidParams: -32602,\n        internal: -32603,\n    },\n    provider: {\n        userRejectedRequest: 4001,\n        unauthorized: 4100,\n        unsupportedMethod: 4200,\n        disconnected: 4900,\n        chainDisconnected: 4901,\n    },\n};\nexports.errorValues = {\n    '-32700': {\n        standard: 'JSON RPC 2.0',\n        message: 'Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.',\n    },\n    '-32600': {\n        standard: 'JSON RPC 2.0',\n        message: 'The JSON sent is not a valid Request object.',\n    },\n    '-32601': {\n        standard: 'JSON RPC 2.0',\n        message: 'The method does not exist / is not available.',\n    },\n    '-32602': {\n        standard: 'JSON RPC 2.0',\n        message: 'Invalid method parameter(s).',\n    },\n    '-32603': {\n        standard: 'JSON RPC 2.0',\n        message: 'Internal JSON-RPC error.',\n    },\n    '-32000': {\n        standard: 'EIP-1474',\n        message: 'Invalid input.',\n    },\n    '-32001': {\n        standard: 'EIP-1474',\n        message: 'Resource not found.',\n    },\n    '-32002': {\n        standard: 'EIP-1474',\n        message: 'Resource unavailable.',\n    },\n    '-32003': {\n        standard: 'EIP-1474',\n        message: 'Transaction rejected.',\n    },\n    '-32004': {\n        standard: 'EIP-1474',\n        message: 'Method not supported.',\n    },\n    '-32005': {\n        standard: 'EIP-1474',\n        message: 'Request limit exceeded.',\n    },\n    '4001': {\n        standard: 'EIP-1193',\n        message: 'User rejected the request.',\n    },\n    '4100': {\n        standard: 'EIP-1193',\n        message: 'The requested account and/or method has not been authorized by the user.',\n    },\n    '4200': {\n        standard: 'EIP-1193',\n        message: 'The requested method is not supported by this Ethereum provider.',\n    },\n    '4900': {\n        standard: 'EIP-1193',\n        message: 'The provider is disconnected from all chains.',\n    },\n    '4901': {\n        standard: 'EIP-1193',\n        message: 'The provider is disconnected from the specified chain.',\n    },\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ethErrors = void 0;\nconst classes_1 = require(\"./classes\");\nconst utils_1 = require(\"./utils\");\nconst error_constants_1 = require(\"./error-constants\");\nexports.ethErrors = {\n    rpc: {\n        /**\n         * Get a JSON RPC 2.0 Parse (-32700) error.\n         */\n        parse: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.parse, arg),\n        /**\n         * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n         */\n        invalidRequest: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest, arg),\n        /**\n         * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n         */\n        invalidParams: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams, arg),\n        /**\n         * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n         */\n        methodNotFound: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound, arg),\n        /**\n         * Get a JSON RPC 2.0 Internal (-32603) error.\n         */\n        internal: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.internal, arg),\n        /**\n         * Get a JSON RPC 2.0 Server error.\n         * Permits integer error codes in the [ -32099 <= -32005 ] range.\n         * Codes -32000 through -32004 are reserved by EIP-1474.\n         */\n        server: (opts) => {\n            if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n                throw new Error('Ethereum RPC Server errors must provide single object argument.');\n            }\n            const { code } = opts;\n            if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n                throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n            }\n            return getEthJsonRpcError(code, opts);\n        },\n        /**\n         * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n         */\n        invalidInput: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput, arg),\n        /**\n         * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n         */\n        resourceNotFound: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound, arg),\n        /**\n         * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n         */\n        resourceUnavailable: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable, arg),\n        /**\n         * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n         */\n        transactionRejected: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected, arg),\n        /**\n         * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n         */\n        methodNotSupported: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported, arg),\n        /**\n         * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n         */\n        limitExceeded: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded, arg),\n    },\n    provider: {\n        /**\n         * Get an Ethereum Provider User Rejected Request (4001) error.\n         */\n        userRejectedRequest: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest, arg);\n        },\n        /**\n         * Get an Ethereum Provider Unauthorized (4100) error.\n         */\n        unauthorized: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.unauthorized, arg);\n        },\n        /**\n         * Get an Ethereum Provider Unsupported Method (4200) error.\n         */\n        unsupportedMethod: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod, arg);\n        },\n        /**\n         * Get an Ethereum Provider Not Connected (4900) error.\n         */\n        disconnected: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.disconnected, arg);\n        },\n        /**\n         * Get an Ethereum Provider Chain Not Connected (4901) error.\n         */\n        chainDisconnected: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected, arg);\n        },\n        /**\n         * Get a custom Ethereum Provider error.\n         */\n        custom: (opts) => {\n            if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n                throw new Error('Ethereum Provider custom errors must provide single object argument.');\n            }\n            const { code, message, data } = opts;\n            if (!message || typeof message !== 'string') {\n                throw new Error('\"message\" must be a nonempty string');\n            }\n            return new classes_1.EthereumProviderError(code, message, data);\n        },\n    },\n};\n// Internal\nfunction getEthJsonRpcError(code, arg) {\n    const [message, data] = parseOpts(arg);\n    return new classes_1.EthereumRpcError(code, message || utils_1.getMessageFromCode(code), data);\n}\nfunction getEthProviderError(code, arg) {\n    const [message, data] = parseOpts(arg);\n    return new classes_1.EthereumProviderError(code, message || utils_1.getMessageFromCode(code), data);\n}\nfunction parseOpts(arg) {\n    if (arg) {\n        if (typeof arg === 'string') {\n            return [arg];\n        }\n        else if (typeof arg === 'object' && !Array.isArray(arg)) {\n            const { message, data } = arg;\n            if (message && typeof message !== 'string') {\n                throw new Error('Must specify string message.');\n            }\n            return [message || undefined, data];\n        }\n    }\n    return [];\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMessageFromCode = exports.serializeError = exports.EthereumProviderError = exports.EthereumRpcError = exports.ethErrors = exports.errorCodes = void 0;\nconst classes_1 = require(\"./classes\");\nObject.defineProperty(exports, \"EthereumRpcError\", { enumerable: true, get: function () { return classes_1.EthereumRpcError; } });\nObject.defineProperty(exports, \"EthereumProviderError\", { enumerable: true, get: function () { return classes_1.EthereumProviderError; } });\nconst utils_1 = require(\"./utils\");\nObject.defineProperty(exports, \"serializeError\", { enumerable: true, get: function () { return utils_1.serializeError; } });\nObject.defineProperty(exports, \"getMessageFromCode\", { enumerable: true, get: function () { return utils_1.getMessageFromCode; } });\nconst errors_1 = require(\"./errors\");\nObject.defineProperty(exports, \"ethErrors\", { enumerable: true, get: function () { return errors_1.ethErrors; } });\nconst error_constants_1 = require(\"./error-constants\");\nObject.defineProperty(exports, \"errorCodes\", { enumerable: true, get: function () { return error_constants_1.errorCodes; } });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serializeError = exports.isValidCode = exports.getMessageFromCode = exports.JSON_RPC_SERVER_ERROR_MESSAGE = void 0;\nconst error_constants_1 = require(\"./error-constants\");\nconst classes_1 = require(\"./classes\");\nconst FALLBACK_ERROR_CODE = error_constants_1.errorCodes.rpc.internal;\nconst FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.';\nconst FALLBACK_ERROR = {\n    code: FALLBACK_ERROR_CODE,\n    message: getMessageFromCode(FALLBACK_ERROR_CODE),\n};\nexports.JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n */\nfunction getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {\n    if (Number.isInteger(code)) {\n        const codeString = code.toString();\n        if (hasKey(error_constants_1.errorValues, codeString)) {\n            return error_constants_1.errorValues[codeString].message;\n        }\n        if (isJsonRpcServerError(code)) {\n            return exports.JSON_RPC_SERVER_ERROR_MESSAGE;\n        }\n    }\n    return fallbackMessage;\n}\nexports.getMessageFromCode = getMessageFromCode;\n/**\n * Returns whether the given code is valid.\n * A code is only valid if it has a message.\n */\nfunction isValidCode(code) {\n    if (!Number.isInteger(code)) {\n        return false;\n    }\n    const codeString = code.toString();\n    if (error_constants_1.errorValues[codeString]) {\n        return true;\n    }\n    if (isJsonRpcServerError(code)) {\n        return true;\n    }\n    return false;\n}\nexports.isValidCode = isValidCode;\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * Merely copies the given error's values if it is already compatible.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.originalError property.\n */\nfunction serializeError(error, { fallbackError = FALLBACK_ERROR, shouldIncludeStack = false, } = {}) {\n    var _a, _b;\n    if (!fallbackError ||\n        !Number.isInteger(fallbackError.code) ||\n        typeof fallbackError.message !== 'string') {\n        throw new Error('Must provide fallback error with integer number code and string message.');\n    }\n    if (error instanceof classes_1.EthereumRpcError) {\n        return error.serialize();\n    }\n    const serialized = {};\n    if (error &&\n        typeof error === 'object' &&\n        !Array.isArray(error) &&\n        hasKey(error, 'code') &&\n        isValidCode(error.code)) {\n        const _error = error;\n        serialized.code = _error.code;\n        if (_error.message && typeof _error.message === 'string') {\n            serialized.message = _error.message;\n            if (hasKey(_error, 'data')) {\n                serialized.data = _error.data;\n            }\n        }\n        else {\n            serialized.message = getMessageFromCode(serialized.code);\n            serialized.data = { originalError: assignOriginalError(error) };\n        }\n    }\n    else {\n        serialized.code = fallbackError.code;\n        const message = (_a = error) === null || _a === void 0 ? void 0 : _a.message;\n        serialized.message = (message && typeof message === 'string'\n            ? message\n            : fallbackError.message);\n        serialized.data = { originalError: assignOriginalError(error) };\n    }\n    const stack = (_b = error) === null || _b === void 0 ? void 0 : _b.stack;\n    if (shouldIncludeStack && error && stack && typeof stack === 'string') {\n        serialized.stack = stack;\n    }\n    return serialized;\n}\nexports.serializeError = serializeError;\n// Internal\nfunction isJsonRpcServerError(code) {\n    return code >= -32099 && code <= -32000;\n}\nfunction assignOriginalError(error) {\n    if (error && typeof error === 'object' && !Array.isArray(error)) {\n        return Object.assign({}, error);\n    }\n    return error;\n}\nfunction hasKey(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\n","'use strict';\n\nconst isStream = stream =>\n\tstream !== null &&\n\ttypeof stream === 'object' &&\n\ttypeof stream.pipe === 'function';\n\nisStream.writable = stream =>\n\tisStream(stream) &&\n\tstream.writable !== false &&\n\ttypeof stream._write === 'function' &&\n\ttypeof stream._writableState === 'object';\n\nisStream.readable = stream =>\n\tisStream(stream) &&\n\tstream.readable !== false &&\n\ttypeof stream._read === 'function' &&\n\ttypeof stream._readableState === 'object';\n\nisStream.duplex = stream =>\n\tisStream.writable(stream) &&\n\tisStream.readable(stream);\n\nisStream.transform = stream =>\n\tisStream.duplex(stream) &&\n\ttypeof stream._transform === 'function';\n\nmodule.exports = isStream;\n","export default {\n  errors: {\n    disconnected: (): string => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: (): string => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: (method: string): string =>\n      `Torus: The Torus Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n    invalidDuplexStream: (): string => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: (maxEventListeners: number): string => `Invalid options. Received: { maxEventListeners: ${maxEventListeners}}`,\n    invalidRequestArgs: (): string => `Expected a single, non-array, object argument.`,\n    invalidRequestMethod: (): string => `'args.method' must be a non-empty string.`,\n    invalidRequestParams: (): string => `'args.params' must be an object or array if provided.`,\n    invalidLoggerObject: (): string => `'args.logger' must be an object if provided.`,\n    invalidLoggerMethod: (method: string): string => `'args.logger' must include required method '${method}'.`,\n  },\n  info: {\n    connected: (chainId: string): string => `Torus: Connected to chain with ID \"${chainId}\".`,\n  },\n  warnings: {},\n};\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nexport const PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\",\n} as const;\n\nexport const TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\",\n} as const;\n\nexport type PAYMENT_PROVIDER_TYPE = typeof PAYMENT_PROVIDER[keyof typeof PAYMENT_PROVIDER];\n\nexport type TORUS_BUILD_ENV_TYPE = typeof TORUS_BUILD_ENV[keyof typeof TORUS_BUILD_ENV];\n\nexport const BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\",\n} as const;\n\nexport type EMBED_TRANSLATION_ITEM = {\n  continue: string;\n  actionRequired: string;\n  pendingAction: string;\n  cookiesRequired: string;\n  enableCookies: string;\n  clickHere: string;\n};\n\nexport type BUTTON_POSITION_TYPE = typeof BUTTON_POSITION[keyof typeof BUTTON_POSITION];\n\nexport type WALLET_PATH = \"transfer\" | \"topup\" | \"home\" | \"settings\" | \"history\";\n\nexport const LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\",\n} as const;\n\nexport type LOGIN_PROVIDER_TYPE = typeof LOGIN_PROVIDER[keyof typeof LOGIN_PROVIDER];\n\nexport interface TorusCtorArgs {\n  /**\n   * Z-index of the modal and iframe\n   * @defaultValue 99999\n   */\n  modalZIndex?: number;\n}\n\nexport interface NetworkInterface {\n  /**\n   * Block explorer url for the chain\n   * @example https://explorer.solana.com/\n   */\n  blockExplorerUrl: string;\n  /**\n   * Logo url for the base token\n   */\n  logo: string;\n  /**\n   * Name for ticker\n   * @example 'Solana'\n   */\n  tickerName: string;\n  /**\n   * Symbol for ticker\n   * @example SOL\n   */\n  ticker: string;\n  /**\n   * RPC target Url for the chain\n   * @example https://api.devnet.solana.com/\n   */\n  rpcTarget: string;\n  /**\n   * Chain Id parameter(hex with 0x prefix) for the network. Mandatory for all networks. (assign one with a map to network identifier for platforms)\n   * @example 0x1 for mainnet, 0x2 for testnet, 0x3 for devnet,  'loading' if not connected to anything yet or connection fails\n   * @defaultValue 'loading'\n   */\n  chainId: string;\n  /**\n   * Display name for the network\n   */\n  displayName: string;\n}\n\nexport interface PaymentParams {\n  /**\n   * Address to send the funds to\n   */\n  selectedAddress?: string;\n  /**\n   * Default fiat currency for the user to make the payment in\n   */\n  selectedCurrency?: string;\n  /**\n   * Amount to buy in the selectedCurrency\n   */\n  fiatValue?: number;\n  /**\n   * Cryptocurrency to buy\n   */\n  selectedCryptoCurrency?: string;\n  /**\n   * Amount Cryptocurrency to buy\n   */\n  cryptoAmount?: number;\n}\n\nexport interface LoginParams {\n  loginProvider?: string;\n}\n\nexport interface UserInfo {\n  /**\n   * Email of the logged in user\n   */\n  email: string;\n  /**\n   * Full name of the logged in user\n   */\n  name: string;\n  /**\n   * Profile image of the logged in user\n   */\n  profileImage: string;\n  /**\n   * verifier of the logged in user (google, facebook etc)\n   */\n  verifier: string;\n  /**\n   * Verifier Id of the logged in user\n   *\n   * email for google,\n   * id for facebook,\n   * username for reddit,\n   * id for twitch,\n   * id for discord\n   */\n  verifierId: string;\n}\n\nexport interface LocaleLinks<T> {\n  /**\n   * Item corresponding to english\n   */\n  en?: T;\n  /**\n   * Item corresponding to japanese\n   */\n  ja?: T;\n  /**\n   * Item corresponding to korean\n   */\n  ko?: T;\n  /**\n   * Item corresponding to german\n   */\n  de?: T;\n  /**\n   * Item corresponding to chinese (simplified)\n   */\n  zh?: T;\n  /**\n   * Item corresponding to spanish\n   */\n  es?: T;\n}\n\nexport type NetworkLabel = \"mainnet-beta\" | \"testnet\" | \"devnet\";\n\nexport interface TorusParams {\n  /**\n   * Determines where the torus widget is visible on the page.\n   * @defaultValue bottom-left\n   */\n  buttonPosition?: BUTTON_POSITION_TYPE;\n  /**\n   * Api key\n   * Get yours today at {@link https://developer.tor.us | Dashboard}\n   */\n  apiKey?: string;\n\n  /**\n   * Torus Network Object\n   */\n  network?: NetworkInterface | NetworkLabel;\n  /**\n   * Build Environment of Torus.\n   *\n   * production uses https://solana.tor.us,\n   *\n   * development uses http://localhost:8080 (expects torus-website to be run locally),\n   *\n   * testing uses https://solana-testing.tor.us (latest internal build)\n   * @defaultValue production\n   */\n  buildEnv?: TORUS_BUILD_ENV_TYPE;\n  /**\n   * Enables or disables logging.\n   *\n   * Defaults to false in prod and true in other environments\n   */\n  enableLogging?: boolean;\n  /**\n   * whether to show/hide torus widget.\n   *\n   * Defaults to true\n   * @defaultValue true\n   */\n  showTorusButton?: boolean;\n  /**\n   * Prefers to use localStorage instead of sessionStorage for torus iframe. Allows longer lived sessions\n   *\n   * Defaults to false\n   * @defaultValue false\n   */\n  useLocalStorage?: boolean;\n  /**\n   * Allows passing external data for initialize\n   *\n   * Defaults to empty object\n   */\n  extraParams?: { [keyof: string]: string };\n}\n\nexport interface TorusLoginParams {\n  loginProvider?: LOGIN_PROVIDER_TYPE;\n  login_hint?: string;\n}\n\nexport interface ProviderOptions {\n  /**\n   * The name of the stream used to connect to the wallet.\n   */\n  jsonRpcStreamName?: string;\n\n  /**\n   * The maximum number of event listeners.\n   */\n  maxEventListeners?: number;\n}\n\nexport interface BaseProviderState {\n  isConnected: boolean;\n  initialized: boolean;\n  isPermanentlyDisconnected: boolean;\n  hasEmittedConnection: boolean;\n}\n\nexport interface InPageProviderState extends BaseProviderState {\n  accounts: null | string[];\n  isUnlocked: boolean;\n}\n\nexport interface CommunicationProviderState extends BaseProviderState {\n  buttonPosition: string;\n  isLoggedIn: boolean;\n  torusWidgetVisibility: boolean;\n  currentLoginProvider: LOGIN_PROVIDER_TYPE;\n  isIFrameFullScreen: boolean;\n}\n\nexport type Maybe<T> = Partial<T> | T | null | undefined;\n\nexport interface UnValidatedJsonRpcRequest extends JRPCRequest<unknown> {\n  windowId?: string;\n}\n\nexport interface RequestArguments<T> {\n  /** The RPC method to request. */\n  method: string;\n\n  /** The params of the RPC method, if any. */\n  params?: T;\n}\n","import { EMBED_TRANSLATION_ITEM, LocaleLinks, LOGIN_PROVIDER } from \"./interfaces\";\n\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\",\n    },\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\",\n    },\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\",\n    },\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\",\n    },\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\",\n    },\n  },\n} as LocaleLinks<{ embed: EMBED_TRANSLATION_ITEM }>;\n\nexport default {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: `torus-${window.location.hostname}`,\n};\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"solana-embed\");\n","import { JRPCMiddleware, SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { LogLevelDesc } from \"loglevel\";\n\nimport config from \"./config\";\nimport { NetworkInterface, NetworkLabel } from \"./interfaces\";\nimport log from \"./loglevel\";\n\n// utility functions\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\nexport function createErrorMiddleware(): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: `The request 'method' must be a non-empty string.`,\n        data: req,\n      });\n    }\n\n    next((done) => {\n      const { error } = res;\n      if (!error) {\n        return done();\n      }\n      log.error(`Torus - RPC Error: ${error.message}`, error);\n      return done();\n    });\n  };\n}\n\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\nexport function logStreamDisconnectWarning(remoteLabel: string, error: Error, emitter: SafeEventEmitter): void {\n  let warningMsg = `Torus: Lost connection to \"${remoteLabel}\".`;\n  if (error?.stack) {\n    warningMsg += `\\n${error.stack}`;\n  }\n  log.warn(warningMsg);\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\n\nexport const getWindowId = (): string => Math.random().toString(36).slice(2);\n\nexport const getTorusUrl = async (buildEnv: string): Promise<{ torusUrl: string; logLevel: LogLevelDesc }> => {\n  let torusUrl: string;\n  let logLevel: LogLevelDesc;\n  // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n    default:\n      torusUrl = `https://solana.tor.us`;\n      logLevel = \"error\";\n      break;\n  }\n  return { torusUrl, logLevel };\n};\n\nexport const getUserLanguage = (): string => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(config.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\n\nexport const NOOP = (): void => {\n  // empty function\n};\n\nexport const FEATURES_PROVIDER_CHANGE_WINDOW = { height: 660, width: 375 };\nexport const FEATURES_DEFAULT_WALLET_WINDOW = { height: 740, width: 1315 };\nexport const FEATURES_DEFAULT_POPUP_WINDOW = { height: 700, width: 1200 };\nexport const FEATURES_CONFIRM_WINDOW = { height: 600, width: 400 };\n\nexport function storageAvailable(type: \"localStorage\" | \"sessionStorage\"): boolean {\n  let storage: Storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return (\n      e &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\n/**\n * popup handler utils\n */\nexport function getPopupFeatures({ width: w, height: h }: { width: number; height: number }): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const getNetworkConfig = (label: NetworkLabel): NetworkInterface | undefined => {\n  switch (label) {\n    case \"mainnet-beta\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x1\",\n        displayName: \"Solana Mainnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.mainnet-beta.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"testnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x2\",\n        displayName: \"Solana Testnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.testnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"devnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x3\",\n        displayName: \"Solana Devnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.devnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    default:\n      return undefined;\n  }\n};\n","import { createLoggerMiddleware, SafeEventEmitterProvider, SendCallBack } from \"@toruslabs/base-controllers\";\nimport {\n  createIdRemapMiddleware,\n  createStreamMiddleware,\n  getRpcPromiseCallback,\n  JRPCEngine,\n  JRPCRequest,\n  JRPCResponse,\n  ObjectMultiplex,\n  SafeEventEmitter,\n  Stream,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { duplex as isDuplexStream } from \"is-stream\";\nimport pump from \"pump\";\nimport type { Duplex } from \"readable-stream\";\n\nimport { BaseProviderState, Maybe, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport messages from \"./messages\";\nimport { createErrorMiddleware, logStreamDisconnectWarning } from \"./utils\";\n\nabstract class BaseProvider<U extends BaseProviderState> extends SafeEventEmitter implements SafeEventEmitterProvider {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  public readonly isTorus: true;\n\n  _rpcEngine: JRPCEngine;\n\n  jsonRpcConnectionEvents: SafeEventEmitter;\n\n  protected _state: U;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super();\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    // this.enable = this.enable.bind(this);\n\n    // setup connectionStream multiplexing\n    const mux = new ObjectMultiplex();\n    pump(\n      connectionStream as unknown as Stream,\n      mux as unknown as Stream,\n      connectionStream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus\")\n    );\n\n    // ignore phishing warning message (handled elsewhere)\n    mux.ignoreStream(\"phishing\");\n\n    // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(\n      jsonRpcConnection.stream as unknown as Stream,\n      mux.createStream(jsonRpcStreamName) as unknown as Stream,\n      jsonRpcConnection.stream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")\n    );\n\n    // handle RPC requests via dapp-side rpc engine\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({ origin: location.origin }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n  async request<TArgs, TResponse>(args: RequestArguments<TArgs>): Promise<Maybe<TResponse>> {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args,\n      });\n    }\n\n    const { method, params } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args,\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args,\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({ method, params }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  send<T, V>(req: JRPCRequest<T>, callback: SendCallBack<V>): void;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  send(payload: JRPCRequest<unknown>, callback: (error: Error | null, result?: JRPCResponse<unknown>) => void): void {\n    this._rpcRequest(payload, callback);\n  }\n\n  sendAsync<T, V>(req: JRPCRequest<T>): Promise<V>;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  sendAsync(payload: JRPCRequest<unknown>): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleStreamDisconnect(streamName: string, error: Error): void {\n    logStreamDisconnectWarning(streamName, error, this);\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  abstract _initializeState(...args: unknown[]): Promise<void>;\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected abstract _rpcRequest(\n    payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[],\n    callback: (...args: unknown[]) => void,\n    isInternal?: boolean\n  ): void;\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInPageProvider#connect\n   */\n  protected abstract _handleConnect(...args: unknown[]): void;\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected abstract _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void;\n}\n\nexport default BaseProvider;\n","export const handleEvent = (handle: EventTarget, eventName: string, handler: (...args: unknown[]) => void, ...handlerArgs: unknown[]): void => {\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n  handle.addEventListener(eventName, handlerWrapper);\n};\n\nexport async function documentReady(): Promise<void> {\n  return new Promise<void>((resolve) => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\n\nexport const htmlToElement = <T extends Element>(html: string): T => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild as T;\n};\n","import { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\n\nimport { FEATURES_DEFAULT_POPUP_WINDOW, getPopupFeatures } from \"./utils\";\n\nclass PopupHandler extends SafeEventEmitter {\n  url: URL;\n\n  target: string;\n\n  features: string;\n\n  window: Window;\n\n  windowTimer: number;\n\n  iClosedWindow: boolean;\n\n  constructor({ url, target, features }: { url: URL; target?: string; features?: string }) {\n    super();\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this._setupTimer();\n  }\n\n  _setupTimer(): void {\n    this.windowTimer = Number(\n      setInterval(() => {\n        if (this.window && this.window.closed) {\n          clearInterval(this.windowTimer);\n          if (!this.iClosedWindow) {\n            this.emit(\"close\");\n          }\n          this.iClosedWindow = false;\n          this.window = undefined;\n        }\n        if (this.window === undefined) clearInterval(this.windowTimer);\n      }, 500)\n    );\n  }\n\n  open(): Promise<void> {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close(): void {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect: boolean): void {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nexport default PopupHandler;\n","import { COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, CommunicationWalletProviderState } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport configuration from \"./config\";\nimport { documentReady, htmlToElement } from \"./embedUtils\";\nimport {\n  BUTTON_POSITION,\n  CommunicationProviderState,\n  EMBED_TRANSLATION_ITEM,\n  LOGIN_PROVIDER_TYPE,\n  ProviderOptions,\n  RequestArguments,\n  UnValidatedJsonRpcRequest,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\nimport PopupHandler from \"./PopupHandler\";\nimport { FEATURES_CONFIRM_WINDOW, getPopupFeatures, getUserLanguage } from \"./utils\";\n\nclass TorusCommunicationProvider extends BaseProvider<CommunicationProviderState> {\n  protected static _defaultState: CommunicationProviderState = {\n    buttonPosition: \"bottom-left\",\n    currentLoginProvider: null,\n    isIFrameFullScreen: false,\n    hasEmittedConnection: false,\n\n    torusWidgetVisibility: false,\n    initialized: false,\n    isLoggedIn: false,\n    isPermanentlyDisconnected: false,\n    isConnected: false,\n  };\n\n  public embedTranslations: EMBED_TRANSLATION_ITEM;\n\n  public torusUrl: string;\n\n  public dappStorageKey: string;\n\n  public windowRefs: Record<string, PopupHandler>;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusIframe: HTMLIFrameElement;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusCommunicationProvider._defaultState,\n    };\n\n    // public state\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {};\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = (payload: RequestArguments<Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const { isFullScreen, rid } = params;\n        this._displayIframe({ isFull: isFullScreen as boolean, rid: rid as string });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const { windowId, url } = params as Record<string, string>;\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const { currentLoginProvider } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider as LOGIN_PROVIDER_TYPE;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn(): boolean {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen(): boolean {\n    return this._state.isIFrameFullScreen;\n  }\n\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params: Record<string, unknown>): Promise<void> {\n    try {\n      const { torusUrl, dappStorageKey, torusAlertContainer, torusIframe } = params;\n      this.torusUrl = torusUrl as string;\n      this.dappStorageKey = dappStorageKey as string;\n      this.torusAlertContainer = torusAlertContainer as HTMLDivElement;\n      this.torusIframe = torusIframe as HTMLIFrameElement;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const { currentLoginProvider, isLoggedIn } = (await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as CommunicationWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId: string, { url, target, features }: { url?: string; target?: string; features?: string } = {}): void {\n    const finalUrl = new URL(url || `${this.torusUrl}/redirect?windowId=${windowId}`);\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += `&dappStorageKey=${this.dappStorageKey}`;\n      else finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    const handledWindow = new PopupHandler({ url: finalUrl, target, features });\n    handledWindow.open();\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n      return;\n    }\n    // Add to collection only if window is opened\n    this.windowRefs[windowId] = handledWindow;\n    // We tell the iframe that the window has been successfully opened\n    this.request<{ windowId: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: { windowId },\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request<{ windowId: string }, unknown>({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: { windowId },\n      });\n    });\n  }\n\n  _displayIframe({ isFull = false, rid = \"\" }: { isFull?: boolean; rid?: string } = {}): void {\n    const style: Partial<CSSStyleDeclaration> = {};\n    // set phase\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request<{ isIFrameFullScreen: boolean; rid: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: { isIFrameFullScreen: isFull, rid },\n    });\n  }\n\n  hideTorusButton(): void {\n    this._state.torusWidgetVisibility = false;\n    this._displayIframe();\n  }\n\n  showTorusButton(): void {\n    this._state.torusWidgetVisibility = true;\n    this._displayIframe();\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void): void {\n    const cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n    this.tryWindowHandle(_payload as JRPCRequest<unknown>[], cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(currentLoginProvider: string, isLoggedIn: boolean): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { currentLoginProvider, isLoggedIn });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  // Called if the iframe wants to close the window cause it is done processing the request\n  private _handleCloseWindow(params: { windowId?: string }): void {\n    const { windowId } = params;\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  private async _createPopupBlockAlert(windowId: string, url: string): Promise<void> {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement<HTMLDivElement>(\n      '<div id=\"torusAlert\" class=\"torus-alert--v2\">' +\n        `<div id=\"torusAlert__logo\"><img src=\"${logoUrl}\" /></div>` +\n        \"<div>\" +\n        `<h1 id=\"torusAlert__title\">${this.embedTranslations.actionRequired}</h1>` +\n        `<p id=\"torusAlert__desc\">${this.embedTranslations.pendingAction}</p>` +\n        \"</div>\" +\n        \"</div>\"\n    );\n\n    const successAlert = htmlToElement(`<div><a id=\"torusAlert__btn\">${this.embedTranslations.continue}</a></div>`);\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  private getLogoUrl(): string {\n    const logoUrl = `${this.torusUrl}/images/torus_icon-blue.svg`;\n    return logoUrl;\n  }\n}\n\nexport default TorusCommunicationProvider;\n","import { InPageWalletProviderState, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest, JRPCSuccess } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport dequal from \"fast-deep-equal\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport { InPageProviderState, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\n\nclass TorusInPageProvider extends BaseProvider<InPageProviderState> {\n  protected static _defaultState: InPageProviderState = {\n    accounts: null,\n    isConnected: false,\n    isUnlocked: false,\n    initialized: false,\n    isPermanentlyDisconnected: false,\n    hasEmittedConnection: false,\n  };\n\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n  public chainId: string | null;\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  public selectedAddress: string | null;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusInPageProvider._defaultState,\n    };\n\n    // public state\n    this.selectedAddress = null;\n    this.chainId = null;\n\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = (payload: RequestArguments<unknown[] | Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params as unknown[]);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params as Record<string, unknown>);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params as Record<string, unknown>);\n      }\n    };\n\n    // json rpc notification listener\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  async _initializeState(): Promise<void> {\n    try {\n      const { accounts, chainId, isUnlocked } = (await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as InPageWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this.emit(\"connect\", { chainId });\n\n      this._handleChainChanged({ chainId });\n      this._handleUnlockStateChanged({ accounts, isUnlocked });\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void, isInternal = false): void {\n    let cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err: Error, res: JRPCSuccess<string[]>) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload as JRPCRequest<unknown>, cb);\n        return;\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(chainId: string): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { chainId });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  /**\n   * Called when accounts may have changed.\n   */\n  protected _handleAccountsChanged(accounts: unknown[], isEthAccounts = false, isInternal = false): void {\n    // defensive programming\n    let finalAccounts = accounts;\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    }\n\n    // emit accountsChanged if anything about the accounts array has changed\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts as string[];\n      this.emit(\"accountsChanged\", finalAccounts);\n    }\n\n    // handle selectedAddress\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = (finalAccounts[0] as string) || null;\n    }\n  }\n\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n  protected _handleChainChanged({ chainId }: { chainId?: string } = {}): void {\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", { chainId });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n  protected _handleUnlockStateChanged({ accounts, isUnlocked }: { accounts?: string[]; isUnlocked?: boolean } = {}): void {\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", { isUnlocked });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n}\n\nexport default TorusInPageProvider;\n","/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url: string): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n      img.onload = () => resolve(true);\n      img.onerror = () => resolve(false);\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\n/**\n * Extracts a name for the site from the DOM\n */\nconst getSiteName = (window: Window): string => {\n  const { document } = window;\n\n  const siteName = document.querySelector<HTMLMetaElement>('head > meta[property=\"og:site_name\"]');\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector<HTMLMetaElement>('head > meta[name=\"title\"]');\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n\n/**\n * Extracts an icon for the site from the DOM\n */\nasync function getSiteIcon(window: Window): Promise<string> {\n  try {\n    const { document } = window;\n\n    // Use the site's favicon if it exists\n    let icon = document.querySelector<HTMLLinkElement>('head > link[rel=\"shortcut icon\"]');\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    // Search through available icons in no particular order\n    icon = Array.from(document.querySelectorAll<HTMLLinkElement>('head > link[rel=\"icon\"]')).find((_icon) => Boolean(_icon.href));\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n\n/**\n * Gets site metadata and returns it\n *\n */\nconst getSiteMetadata = async (): Promise<{ name: string; icon: string }> => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window),\n});\n\nexport default getSiteMetadata;\n","import { PublicKey, SignaturePubkeyPair, Transaction } from \"@solana/web3.js\";\nimport { COMMUNICATION_JRPC_METHODS } from \"@toruslabs/base-controllers\";\nimport { setAPIKey } from \"@toruslabs/http-helpers\";\nimport { BasePostMessageStream, getRpcPromiseCallback, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nimport TorusCommunicationProvider from \"./communicationProvider\";\nimport configuration from \"./config\";\nimport { documentReady, htmlToElement } from \"./embedUtils\";\nimport TorusInPageProvider from \"./inPageProvider\";\nimport {\n  BUTTON_POSITION,\n  LOGIN_PROVIDER_TYPE,\n  NetworkInterface,\n  PAYMENT_PROVIDER_TYPE,\n  PaymentParams,\n  TORUS_BUILD_ENV,\n  TorusCtorArgs,\n  TorusLoginParams,\n  TorusParams,\n  UnValidatedJsonRpcRequest,\n  UserInfo,\n  WALLET_PATH,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport PopupHandler from \"./PopupHandler\";\nimport getSiteMetadata from \"./siteMetadata\";\nimport {\n  FEATURES_CONFIRM_WINDOW,\n  FEATURES_DEFAULT_WALLET_WINDOW,\n  FEATURES_PROVIDER_CHANGE_WINDOW,\n  getPopupFeatures,\n  getTorusUrl,\n  getWindowId,\n  storageAvailable,\n} from \"./utils\";\n\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\n\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\");\n\n// preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const { torusUrl } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = `${torusUrl}/frame`;\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  isInitialized: boolean;\n\n  torusAlert: HTMLDivElement;\n\n  modalZIndex: number;\n\n  alertZIndex: number;\n\n  public requestedLoginProvider?: LOGIN_PROVIDER_TYPE;\n\n  provider: TorusInPageProvider;\n\n  communicationProvider: TorusCommunicationProvider;\n\n  dappStorageKey: string;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusUrl: string;\n\n  private torusIframe: HTMLIFrameElement;\n\n  private styleLink: HTMLLinkElement;\n\n  constructor({ modalZIndex = 99999 }: TorusCtorArgs = {}) {\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn(): boolean {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init({\n    buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n    enableLogging = false,\n    network,\n    showTorusButton = false,\n    useLocalStorage = false,\n    buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n    apiKey = \"torus-default\",\n    extraParams = {},\n  }: TorusParams = {}): Promise<void> {\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const { torusUrl, logLevel } = await getTorusUrl(buildEnv);\n    log.info(torusUrl, \"url loaded\");\n\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();\n    else log.disableAll();\n\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";\n    else torusIframeUrl.pathname += \"/frame\";\n\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n\n    torusIframeUrl.hash = hashParams.toString();\n\n    // Iframe code\n    this.torusIframe = htmlToElement<HTMLIFrameElement>(\n      `<iframe\n        id=\"torusIframe\"\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex.toString()}\"\n      ></iframe>`\n    );\n\n    this.torusAlertContainer = htmlToElement<HTMLDivElement>(\n      `<div id=\"torusAlertContainer\" style=\"display:none; z-index: ${this.alertZIndex.toString()}\"></div>`\n    );\n\n    this.styleLink = htmlToElement<HTMLLinkElement>(`<link href=\"${torusUrl}/css/widget.css\" rel=\"stylesheet\" type=\"text/css\">`);\n    const handleSetup = async () => {\n      return new Promise<void>((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata();\n            // send init params here\n            this.torusIframe.contentWindow.postMessage(\n              {\n                buttonPosition,\n                apiKey,\n                network,\n                dappMetadata,\n                extraParams,\n              },\n              torusIframeUrl.origin\n            );\n            await this._setupWeb3({\n              torusUrl,\n            });\n            if (showTorusButton) this.showTorusButton();\n            else this.hideTorusButton();\n            this.isInitialized = true;\n            (window as any).torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n\n    await documentReady();\n    await handleSetup();\n  }\n\n  async login(params: TorusLoginParams = {}): Promise<string[]> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({ isFull: true });\n      }\n      // If user is already logged in, we assume they have given access to the website\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest(\n          { method: \"solana_requestAccounts\", params: [this.requestedLoginProvider, params.login_hint] },\n          getRpcPromiseCallback(resolve, reject)\n        );\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      }\n      // This would never happen, but just in case\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async loginWithPrivateKey(loginParams: { privateKey: string; userInfo: UserInfo }): Promise<void> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    const { privateKey, userInfo } = loginParams;\n    const { success } = await this.communicationProvider.request<{ privateKey: string; userInfo: UserInfo }, { success: boolean }>({\n      method: \"login_with_private_key\",\n      params: {\n        privateKey,\n        userInfo,\n      },\n    });\n    if (!success) throw new Error(\"Login Failed\");\n  }\n\n  async logout(): Promise<void> {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: [],\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp(): Promise<void> {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n    this.clearInit();\n  }\n\n  clearInit(): void {\n    function isElement(element: unknown) {\n      return element instanceof Element || element instanceof Document;\n    }\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n    this.isInitialized = false;\n  }\n\n  hideTorusButton(): void {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton(): void {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params: NetworkInterface): Promise<void> {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: { ...params },\n    });\n  }\n\n  async showWallet(path: WALLET_PATH, params: Record<string, string> = {}): Promise<void> {\n    const instanceId = await this.communicationProvider.request<[], string>({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: [],\n    });\n    const finalPath = path ? `/${path}` : \"\";\n\n    const finalUrl = new URL(`${this.torusUrl}/wallet${finalPath}`);\n    // Using URL constructor to prevent js injection and allow parameter validation.!\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach((x) => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n    if (this.dappStorageKey) {\n      finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    // No need to track this window state. Hence, no _handleWindow call.\n    const walletWindow = new PopupHandler({ url: finalUrl, features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW) });\n    walletWindow.open();\n  }\n\n  async getUserInfo(): Promise<UserInfo> {\n    const userInfoResponse = await this.communicationProvider.request<[], UserInfo>({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: [],\n    });\n    return userInfoResponse as UserInfo;\n  }\n\n  async initiateTopup(provider: PAYMENT_PROVIDER_TYPE, params: PaymentParams): Promise<boolean> {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n    this.communicationProvider._handleWindow(windowId);\n    const topupResponse = await this.communicationProvider.request<\n      { provider: PAYMENT_PROVIDER_TYPE; params: PaymentParams; windowId: string },\n      boolean\n    >({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: { provider, params, windowId },\n    });\n    return topupResponse;\n  }\n\n  // Solana specific API\n  async getAccounts() {\n    const response = (await this.provider.request({\n      method: \"getAccounts\",\n      params: [],\n    })) as string[];\n    return response;\n  }\n\n  async sendTransaction(transaction: Transaction): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"send_transaction\",\n      params: { message: transaction.serialize({ requireAllSignatures: false }).toString(\"hex\") },\n    })) as string;\n    return response;\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const response: string = (await this.provider.request({\n      method: \"sign_transaction\",\n      params: { message: transaction.serializeMessage().toString(\"hex\"), messageOnly: true },\n    })) as string;\n\n    // reconstruct signature pair\n    const parsed = JSON.parse(response);\n    const signature: SignaturePubkeyPair = { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    transaction.addSignature(signature.publicKey, signature.signature);\n    return transaction;\n  }\n\n  async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const encodedMessage: string[] = transactions.map((tx) => {\n      return tx.serializeMessage().toString(\"hex\");\n    });\n    const responses: string[] = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: { message: encodedMessage, messageOnly: true },\n    });\n\n    // reconstruct signature pairs\n    const signatures: SignaturePubkeyPair[] = responses.map((item) => {\n      const parsed = JSON.parse(item);\n      return { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    });\n\n    transactions.forEach((tx, idx) => {\n      tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = (await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data,\n      },\n    })) as Uint8Array;\n    return response;\n  }\n\n  async getGaslessPublicKey(): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: [],\n    })) as string;\n    return response;\n  }\n\n  // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n  private handleDappStorageKey(useLocalStorage: boolean) {\n    let dappStorageKey = \"\";\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;\n      else {\n        const generatedKey = `torus-app-${getWindowId()}`;\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  private async _setupWeb3(providerParams: { torusUrl: string }): Promise<void> {\n    log.info(\"setupWeb3 running\");\n    // setup background connection\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // compose the inPage provider\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n        _payload.windowId = windowId;\n      }\n      inPageProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>[], cb);\n    };\n\n    communicationProvider.tryWindowHandle = (payload: JRPCRequest<unknown>, cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW), // todo: are these features generic for all\n        });\n        // for communication methods sending window id in jrpc req params\n        (_payload.params as Record<string, unknown>).windowId = windowId;\n      }\n      communicationProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>, cb);\n    };\n\n    // detect solana_requestAccounts and pipe to enable for now\n    const detectAccountRequestPrototypeModifier = (m) => {\n      const originalMethod = inPageProvider[m];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const self = this;\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const { method, params = [] } = request;\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({ loginProvider: params[0] });\n          self\n            .login({ loginProvider: params[0] })\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .then((res) => cb(null, res))\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .catch((err) => cb(err));\n        }\n        return originalMethod.apply(this, [request, cb]);\n      };\n    };\n\n    // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n\n    await Promise.all([\n      inPageProvider._initializeState(),\n      communicationProvider._initializeState({\n        ...providerParams,\n        dappStorageKey: this.dappStorageKey,\n        torusAlertContainer: this.torusAlertContainer,\n        torusIframe: this.torusIframe,\n      }),\n    ]);\n    log.debug(\"Torus - injected provider\");\n  }\n}\n\nexport default Torus;\n","import Torus, { NetworkInterface, TorusCtorArgs, TorusLoginParams, TorusParams } from \"@toruslabs/solana-embed\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { ITorusWalletProvider, TorusInjectedProvider } from \"@web3auth/solana-provider\";\n\nexport interface SolanaWalletOptions {\n  adapterSettings?: TorusCtorArgs;\n  loginSettings?: TorusLoginParams;\n  initParams?: Omit<TorusParams, \"network\">;\n  chainConfig?: CustomChainConfig;\n}\n\nexport class SolanaWalletAdapter extends BaseAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.TORUS_SOLANA;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public torusInstance: Torus | null = null;\n\n  private torusWalletOptions?: TorusCtorArgs;\n\n  private initParams?: TorusParams;\n\n  private loginSettings?: TorusLoginParams = {};\n\n  private solanaProvider: TorusInjectedProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(params: SolanaWalletOptions = {}) {\n    super();\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      return this.solanaProvider?.provider || null;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    // set chainConfig for mainnet by default if not set\n    let network: NetworkInterface;\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n      const { blockExplorer, displayName, ticker, tickerName, rpcTarget, chainId } = this.chainConfig as CustomChainConfig;\n      network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, ticker, tickerName, logo: \"\" };\n    } else {\n      const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n      network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n    }\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus solana adapter init\");\n    await this.torusInstance.init({ showTorusButton: false, ...this.initParams, network });\n\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig as CustomChainConfig,\n      },\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      log.debug(\"initializing torus solana adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.TORUS_SOLANA });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      try {\n        const torusInpageProvider = this.torusInstance.provider as unknown as ITorusWalletProvider;\n        torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n        torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n        torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n        torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n        await this.solanaProvider.setupProvider(torusInpageProvider);\n      } catch (error: unknown) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n          const network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, { adapter: WALLET_ADAPTERS.TORUS_SOLANA, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  setAdapterSettings(_: unknown): void {}\n}\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n"],"names":["FALLBACK_ERROR","serialized","isStream","stream","pipe","writable","_write","_writableState","readable","_read","_readableState","duplex","transform","_transform","module","exports","disconnected","permanentlyDisconnected","unsupportedSync","method","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","connected","chainId","TORUS_BUILD_ENV","BUTTON_POSITION","supportedVerifierList","api","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","prodTorusUrl","localStorageKey","window","loglevel","getWindowId","Math","getTorusUrl","torusUrl","logLevel","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","h","dualScreenLeft","dualScreenTop","document","left","top","w","constructor","connectionStream","jsonRpcStreamName","isDuplexStream","messages","isTorus","setMaxListeners","_handleConnect","_handleDisconnect","_handleStreamDisconnect","_rpcRequest","_initializeState","request","sendAsync","mux","pump","jsonRpcConnection","createStreamMiddleware","rpcEngine","createIdRemapMiddleware","req","res","message","data","next","done","error","log","createLoggerMiddleware","origin","location","_rpcEngine","args","Array","params","Promise","getRpcPromiseCallback","resolve","send","this","remoteLabel","emitter","warningMsg","logStreamDisconnectWarning","streamName","handleEvent","handle","handlerArgs","handlerWrapper","handler","htmlToElement","html","template","trimmedHtml","features","url","target","getPopupFeatures","windowTimer","iClosedWindow","_setupTimer","Number","setInterval","clearInterval","emit","open","focus","close","redirect","TorusCommunicationProvider","dappStorageKey","languageTranslations","configuration","userLanguage","userLanguages","Object","config","getUserLanguage","payload","COMMUNICATION_NOTIFICATIONS","rid","isFull","_handleCloseWindow","currentLoginProvider","isLoggedIn","isIFrameFullScreen","isConnected","torusIframe","torusAlertContainer","COMMUNICATION_JRPC_METHODS","_handleWindow","finalUrl","URL","handledWindow","PopupHandler","windowId","_displayIframe","style","_state","torusWidgetVisibility","hideTorusButton","showTorusButton","cb","_payload","errorMessage","windowRefs","_createPopupBlockAlert","logoUrl","torusAlert","embedTranslations","successAlert","btnContainer","bindOnLoad","attachOnLoad","documentReady","getLogoUrl","buttonPosition","hasEmittedConnection","initialized","isPermanentlyDisconnected","TorusInPageProvider","selectedAddress","_handleAccountsChanged","_handleChainChanged","_handleUnlockStateChanged","PROVIDER_NOTIFICATIONS","PROVIDER_JRPC_METHODS","isUnlocked","accounts","isInternal","callback","err","isEthAccounts","finalAccounts","account","dequal","length","imgExists","img","e","reject","getSiteName","siteName","metaTitle","icon","_icon","Boolean","getSiteMetadata","getSiteIcon","name","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","isLocalStorageAvailable","storage","x","storageAvailable","torusIframeHtml","modalZIndex","requestedLoginProvider","init","buildEnv","enableLogging","useLocalStorage","apiKey","extraParams","Error","setAPIKey","handleDappStorageKey","torusIframeUrl","hashParams","alertZIndex","handleSetup","dappMetadata","network","isInitialized","login","communicationProvider","provider","loginWithPrivateKey","userInfo","privateKey","success","logout","cleanUp","clearInit","isElement","element","styleLink","setProvider","showWallet","instanceId","finalPath","path","walletWindow","getUserInfo","userInfoResponse","initiateTopup","topupResponse","getAccounts","response","sendTransaction","transaction","requireAllSignatures","signTransaction","messageOnly","parsed","JSON","signature","publicKey","Buffer","signAllTransactions","encodedMessage","transactions","tx","responses","signatures","item","signMessage","getGaslessPublicKey","storedKey","generatedKey","_setupWeb3","providerStream","targetWindow","contentWindow","communicationStream","inPageProvider","detectAccountRequestPrototypeModifier","m","originalMethod","self","loginProvider","proxiedInPageProvider","Proxy","deleteProperty","proxiedCommunicationProvider","WALLET_ADAPTERS","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","ADAPTER_STATUS","status","solanaProvider","tickerName","rpcTarget","blockExplorerUrl","displayName","ticker","logo","getChainConfig","Torus","torusInstance","chainConfig","ADAPTER_EVENTS","options","connect","WalletInitializationError","adapter","torusInpageProvider","bind","setupProvider","reconnected","rehydrated","WalletLoginError","disconnect","cleanup","setAdapterSettings","equal","a","b","i","keys","isArray","RegExp","source","flags","valueOf","prototype","toString","hasOwnProperty","call","key"],"sourceRoot":""}