{"version":3,"file":"static/js/698.906af4fb.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/openlogin-adapter/src/config.ts","../node_modules/@web3auth/openlogin-adapter/src/openloginAdapter.ts"],"sourcesContent":["import { OPENLOGIN_NETWORK, UX_MODE } from \"@toruslabs/openlogin\";\nimport { ChainNamespaceType, getChainConfig } from \"@web3auth/base\";\n\nimport { OpenloginAdapterOptions } from \"./interface\";\n\nexport const getOpenloginDefaultOptions = (chainNamespace?: ChainNamespaceType, chainId?: number | string): OpenloginAdapterOptions => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP,\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : null,\n    loginSettings: {\n      relogin: true,\n    },\n  };\n};\n","import OpenLogin, { getHashQueryParams, LoginParams, OPENLOGIN_NETWORK, OpenLoginOptions, UX_MODE } from \"@toruslabs/openlogin\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { CommonPrivateKeyProvider, IBaseProvider } from \"@web3auth/base-provider\";\nimport merge from \"lodash.merge\";\n\nimport { getOpenloginDefaultOptions } from \"./config\";\nimport type { LoginSettings, OpenloginAdapterOptions } from \"./interface\";\n\nexport type OpenloginLoginParams = LoginParams & {\n  // to maintain backward compatibility\n  login_hint?: string;\n};\n\ntype PrivateKeyProvider = IBaseProvider<string>;\n\nexport class OpenloginAdapter extends BaseAdapter<OpenloginLoginParams> {\n  readonly name: string = WALLET_ADAPTERS.OPENLOGIN;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.MULTICHAIN;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.IN_APP;\n\n  public openloginInstance: OpenLogin | null = null;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  private openloginOptions: OpenLoginOptions;\n\n  private loginSettings: LoginSettings = {};\n\n  private privKeyProvider: PrivateKeyProvider | null = null;\n\n  constructor(params: OpenloginAdapterOptions) {\n    super();\n    log.debug(\"const openlogin adapter\", params);\n    const defaultOptions = getOpenloginDefaultOptions(params.chainConfig?.chainNamespace, params.chainConfig?.chainId);\n    this.openloginOptions = {\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET,\n      ...defaultOptions.adapterSettings,\n      ...(params.adapterSettings || {}),\n    };\n    this.loginSettings = { ...defaultOptions.loginSettings, ...params.loginSettings };\n    // if no chainNamespace is passed then chain config should be set before calling init\n    if (params.chainConfig?.chainNamespace) {\n      this.currentChainNamespace = params.chainConfig?.chainNamespace;\n      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      this.chainConfig = { ...defaultChainIdConfig, ...params?.chainConfig };\n      log.debug(\"const openlogin chainConfig\", this.chainConfig);\n      if (!this.chainConfig.rpcTarget) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n  }\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.privKeyProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.openloginOptions?.clientId) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.chainConfig && this.currentChainNamespace !== CHAIN_NAMESPACES.OTHER)\n      throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    let isRedirectResult = false;\n\n    if (this.openloginOptions.uxMode === UX_MODE.REDIRECT) {\n      const redirectResult = getHashQueryParams();\n      if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {\n        isRedirectResult = true;\n      }\n    }\n    this.openloginOptions = {\n      ...this.openloginOptions,\n      replaceUrlOnRedirect: isRedirectResult,\n    };\n    this.openloginInstance = new OpenLogin(this.openloginOptions);\n    log.debug(\"initializing openlogin adapter init\");\n\n    await this.openloginInstance.init();\n\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      log.debug(\"initializing openlogin adapter\");\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (this.openloginInstance.privKey && (options.autoConnect || isRedirectResult)) {\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params?: OpenloginLoginParams): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { ...params, adapter: WALLET_ADAPTERS.OPENLOGIN });\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error: unknown) {\n      log.error(\"Failed to connect with openlogin provider\", error);\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if ((error as Error)?.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      }\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  }\n\n  // should be called only before initialization.\n  setAdapterSettings(adapterSettings: OpenLoginOptions): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    const defaultOptions = getOpenloginDefaultOptions();\n    this.openloginOptions = { ...defaultOptions.adapterSettings, ...(this.openloginOptions || {}), ...adapterSettings };\n  }\n\n  // should be called only before initialization.\n  setChainConfig(customChainConfig: CustomChainConfig): void {\n    super.setChainConfig(customChainConfig);\n    this.currentChainNamespace = customChainConfig.chainNamespace;\n  }\n\n  private async connectWithProvider(params?: OpenloginLoginParams): Promise<void> {\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      const { SolanaPrivateKeyProvider } = await import(\"@web3auth/solana-provider\");\n      this.privKeyProvider = new SolanaPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {\n      const { EthereumPrivateKeyProvider } = await import(\"@web3auth/ethereum-provider\");\n      this.privKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.OTHER) {\n      this.privKeyProvider = new CommonPrivateKeyProvider();\n    } else {\n      throw new Error(`Invalid chainNamespace: ${this.currentChainNamespace} found while connecting to wallet`);\n    }\n    // if not logged in then login\n    if (!this.openloginInstance.privKey && params) {\n      await this.openloginInstance.login(\n        merge(\n          this.loginSettings,\n          { loginProvider: params.loginProvider },\n          { extraLoginOptions: { ...(params.extraLoginOptions || {}), login_hint: params.login_hint || params.extraLoginOptions?.login_hint } }\n        )\n      );\n    }\n    let finalPrivKey = this.openloginInstance.privKey;\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const { getED25519Key } = await import(\"@toruslabs/openlogin-ed25519\");\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.OPENLOGIN, reconnected: !params } as CONNECTED_EVENT_DATA);\n    }\n  }\n}\n"],"names":["getOpenloginDefaultOptions","chainNamespace","adapterSettings","network","OPENLOGIN_NETWORK","clientId","uxMode","UX_MODE","chainConfig","getChainConfig","loginSettings","relogin","constructor","WALLET_ADAPTERS","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","ADAPTER_STATUS","CHAIN_NAMESPACES","log","defaultOptions","params","defaultChainIdConfig","WalletInitializationError","chainConfigProxy","this","provider","privKeyProvider","Error","init","currentChainNamespace","isRedirectResult","openloginOptions","redirectResult","getHashQueryParams","Object","replaceUrlOnRedirect","openloginInstance","ADAPTER_EVENTS","privKey","options","connect","adapter","connectWithProvider","error","WalletLoginError","disconnect","cleanup","status","getUserInfo","userInfo","setAdapterSettings","setChainConfig","customChainConfig","SolanaPrivateKeyProvider","config","EthereumPrivateKeyProvider","login","merge","loginProvider","extraLoginOptions","login_hint","finalPrivKey","getED25519Key","setupProvider","reconnected"],"sourceRoot":""}