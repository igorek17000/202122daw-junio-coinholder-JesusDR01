{"version":3,"file":"static/js/45.1882d39a.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/wallet-connect-v1-adapter/src/config.ts","../node_modules/@web3auth/wallet-connect-v1-adapter/src/walletConnectV1adapter.ts"],"sourcesContent":["import { CHAIN_NAMESPACES, IWalletConnectExtensionAdapter } from \"@web3auth/base\";\n\nexport const WALLET_CONNECT_EXTENSION_ADAPTERS: IWalletConnectExtensionAdapter[] = [\n  {\n    name: \"Rainbow\",\n    chains: [CHAIN_NAMESPACES.EIP155],\n    logo: \"https://images.web3auth.io/login-rainbow.svg\",\n    mobile: {\n      native: \"rainbow:\",\n      universal: \"https://rnbwapp.com\",\n    },\n    desktop: {\n      native: \"\",\n      universal: \"\",\n    },\n  },\n  {\n    name: \"MetaMask\",\n    chains: [CHAIN_NAMESPACES.EIP155],\n    logo: \"https://images.web3auth.io/login-metamask.svg\",\n    mobile: {\n      native: \"metamask:\",\n      universal: \"https://metamask.app.link\",\n    },\n    desktop: {\n      native: \"\",\n      universal: \"\",\n    },\n  },\n];\n","import WalletConnect from \"@walletconnect/client\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletConnectV1Data,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { WalletConnectProvider } from \"@web3auth/ethereum-provider\";\n\nimport { WALLET_CONNECT_EXTENSION_ADAPTERS } from \"./config\";\nimport { WalletConnectV1AdapterOptions } from \"./interface\";\n\nclass WalletConnectV1Adapter extends BaseAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.WALLET_CONNECT_V1;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly adapterOptions: WalletConnectV1AdapterOptions;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public adapterData: WalletConnectV1Data = {\n    uri: \"\",\n    extensionAdapters: WALLET_CONNECT_EXTENSION_ADAPTERS,\n  };\n\n  public connector: WalletConnect | null = null;\n\n  private wcProvider: WalletConnectProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(options: WalletConnectV1AdapterOptions = {}) {\n    super();\n    this.adapterOptions = { ...options };\n    this.chainConfig = options.chainConfig || null;\n  }\n\n  get connected(): boolean {\n    return !!this.connector?.connected;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.wcProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    }\n    // Create a connector\n    this.connector = this.getWalletConnectInstance();\n    this.wcProvider = new WalletConnectProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig }, connector: this.connector });\n\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V1);\n    this.status = ADAPTER_STATUS.READY;\n    log.debug(\"initializing wallet connect v1 adapter\");\n    if (this.connector.connected) {\n      this.rehydrated = true;\n      await this.onConnectHandler({ accounts: this.connector.accounts, chainId: this.connector.chainId });\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n\n    if (this.connected) {\n      await this.onConnectHandler({ accounts: this.connector.accounts, chainId: this.connector.chainId });\n      return this.provider;\n    }\n\n    if (this.status !== ADAPTER_STATUS.CONNECTING) {\n      // for wallet connect qr code modal we have to create a new connector, coz wallet connect internally does not open\n      // modal again on existing instance if connection is pending.\n      if (this.adapterOptions.adapterSettings?.qrcodeModal) {\n        this.connector = this.getWalletConnectInstance();\n        this.wcProvider = new WalletConnectProvider({\n          config: {\n            chainConfig: this.chainConfig as CustomChainConfig,\n            // network switching can be skipped with custom ui\n            skipLookupNetwork: this.adapterOptions.adapterSettings?.skipNetworkSwitching,\n          },\n          connector: this.connector,\n        });\n      }\n      await this.createNewSession();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1 });\n    }\n    return new Promise((resolve, reject) => {\n      if (!this.connector) return reject(WalletInitializationError.notReady(\"Wallet adapter is not ready yet\"));\n      // for wallet connect default modal.\n      this.connector.on(\"modal_closed\", async () => {\n        this.status = ADAPTER_STATUS.READY;\n        this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V1);\n        return reject(new Error(\"User closed modal\"));\n      });\n      try {\n        // Subscribe to session connection\n        this.connector.on(\"connect\", async (error: Error | null, payload: { params: { accounts: string[]; chainId: number }[] }) => {\n          if (error) {\n            this.emit(ADAPTER_EVENTS.ERRORED, error);\n          }\n          log.debug(\"connected event emitted by web3auth\");\n          await this.onConnectHandler(payload.params[0]);\n          return resolve(this.provider);\n        });\n      } catch (error: unknown) {\n        log.error(\"Wallet connect v1 adapter error while connecting\", error);\n        // ready again to be connected\n        this.status = ADAPTER_STATUS.READY;\n        this.rehydrated = true;\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n        reject(\n          error instanceof Web3AuthError\n            ? error\n            : WalletLoginError.connectionError(`Failed to login with wallet connect: ${(error as Error)?.message || \"\"}`)\n        );\n      }\n    });\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.connected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    const { cleanup } = options;\n    if (!this.connector || !this.connected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    await this.connector.killSession();\n    this.rehydrated = false;\n    if (cleanup) {\n      this.connector = null;\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.wcProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  private async addChain(chainConfig: CustomChainConfig): Promise<void> {\n    try {\n      if (!this.wcProvider) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n      const networkSwitch = this.adapterOptions.adapterSettings?.networkSwitchModal;\n      if (networkSwitch) {\n        await networkSwitch.addNetwork({ chainConfig, appOrigin: window.location.hostname });\n      }\n      await this.wcProvider.addChain(chainConfig);\n    } catch (error) {\n      log.error(error);\n    }\n  }\n\n  private async switchChain(connectedChainConfig: Partial<CustomChainConfig>, chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.wcProvider) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    const networkSwitch = this.adapterOptions.adapterSettings?.networkSwitchModal;\n\n    if (networkSwitch) {\n      await networkSwitch.switchNetwork({\n        currentChainConfig: chainConfig,\n        newChainConfig: connectedChainConfig,\n        appOrigin: window.location.hostname,\n      });\n    }\n    await this.wcProvider.switchChain({ chainId: chainConfig.chainId, lookup: false, addChain: false });\n  }\n\n  private async createNewSession(opts: { forceNewSession: boolean } = { forceNewSession: false }): Promise<void> {\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    if (opts.forceNewSession && this.connector.pending) {\n      await this.connector.killSession();\n    }\n    // for wallet connect qr modal\n    if (this.adapterOptions?.adapterSettings?.qrcodeModal) {\n      await this.connector.createSession({ chainId: parseInt(this.chainConfig?.chainId || \"0x1\", 16) });\n      return;\n    }\n\n    // for web3auth qr code modal\n    return new Promise<void>((resolve, reject) => {\n      if (!this.connector) return reject(WalletInitializationError.notReady(\"Wallet adapter is not ready yet\"));\n      log.debug(\"creating new session for web3auth wallet connect\");\n      this.connector.on(\"display_uri\", async (err, payload) => {\n        if (err) {\n          this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.connectionError(\"Failed to display wallet connect qr code\"));\n          return reject(err);\n        }\n        const uri = payload.params[0];\n        this.updateAdapterData({ uri, extensionAdapters: WALLET_CONNECT_EXTENSION_ADAPTERS } as WalletConnectV1Data);\n\n        this.connector?.off(\"display_uri\");\n        return resolve();\n      });\n\n      this.connector.createSession({ chainId: parseInt(this.chainConfig?.chainId || \"0x1\", 16) }).catch((error) => {\n        log.error(\"error while creating new wallet connect session\", error);\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n        return reject(error);\n      });\n    });\n  }\n\n  private async onConnectHandler(params: { accounts: string[]; chainId: number }) {\n    if (!this.connector || !this.wcProvider) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"Chain config is not set\");\n\n    const { chainId } = params;\n    log.debug(\"connected chainId in hex\");\n    if (chainId !== parseInt(this.chainConfig.chainId, 16)) {\n      const connectedChainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, chainId) || {\n        chainId: `0x${chainId.toString(16)}`,\n        displayName: \"Unknown Network\",\n      };\n\n      const isCustomUi = this.adapterOptions.adapterSettings?.qrcodeModal;\n      // skipping network is not allowed in default ui. We are use network switching modal for default ui.\n      if (!isCustomUi || (isCustomUi && !this.adapterOptions?.adapterSettings?.skipNetworkSwitching)) {\n        try {\n          await this.addChain(this.chainConfig);\n          await this.switchChain(connectedChainConfig, this.chainConfig);\n          this.connector = this.getWalletConnectInstance();\n        } catch (error) {\n          log.error(\"error while chain switching\", error);\n          // we need to create a new session since old session is already used and\n          // user needs to login again with correct chain with new qr code.\n          await this.createNewSession({ forceNewSession: true });\n          this.emit(\n            ADAPTER_EVENTS.ERRORED,\n            WalletInitializationError.fromCode(\n              5000,\n              `Not connected to correct network. Expected: ${this.chainConfig.displayName}, Current: ${\n                connectedChainConfig?.displayName || chainId\n              }, Please switch to correct network from wallet`\n            )\n          );\n          this.status = ADAPTER_STATUS.READY;\n          this.rehydrated = true;\n          return;\n        }\n      }\n    }\n    await this.wcProvider.setupProvider(this.connector);\n    this.subscribeEvents(this.connector);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n  }\n\n  private subscribeEvents(connector: WalletConnect): void {\n    connector.on(\"session_update\", async (error: Error | null) => {\n      if (error) {\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n      }\n    });\n  }\n\n  private getWalletConnectInstance(): WalletConnect {\n    const walletConnectOptions = this.adapterOptions.adapterSettings || {};\n    walletConnectOptions.bridge = walletConnectOptions.bridge || \"https://bridge.walletconnect.org\";\n    // Create a connector\n    return new WalletConnect(walletConnectOptions);\n  }\n}\n\nexport { WalletConnectV1Adapter };\n"],"names":["WALLET_CONNECT_EXTENSION_ADAPTERS","name","chains","CHAIN_NAMESPACES","logo","mobile","native","universal","desktop","constructor","options","WALLET_ADAPTERS","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","ADAPTER_STATUS","uri","extensionAdapters","connected","this","provider","wcProvider","Error","init","getChainConfig","config","chainConfig","connector","ADAPTER_EVENTS","log","onConnectHandler","accounts","chainId","connect","WalletInitializationError","status","adapterOptions","skipLookupNetwork","skipNetworkSwitching","adapter","Promise","reject","payload","resolve","error","WalletLoginError","getUserInfo","disconnect","cleanup","addChain","networkSwitch","appOrigin","window","hostname","switchChain","currentChainConfig","newChainConfig","lookup","createNewSession","opts","forceNewSession","createSession","parseInt","connectedChainConfig","displayName","isCustomUi","setupProvider","reconnected","rehydrated","subscribeEvents","getWalletConnectInstance","walletConnectOptions","adapterSettings"],"sourceRoot":""}