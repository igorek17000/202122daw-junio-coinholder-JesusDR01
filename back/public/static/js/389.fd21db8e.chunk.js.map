{"version":3,"file":"static/js/389.fd21db8e.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/metamask-adapter/src/metamaskAdapter.ts"],"sourcesContent":["import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport interface MetamaskAdapterOptions {\n  chainConfig?: CustomChainConfig;\n}\n\nclass MetamaskAdapter extends BaseAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private rehydrated = false;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  constructor(adapterOptions: MetamaskAdapterOptions = {}) {\n    super();\n    this.chainConfig = adapterOptions.chainConfig || null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(_: unknown): void {}\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    // set default to mainnet\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.switchChain(this.chainConfig as CustomChainConfig);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async switchChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: chainConfig.chainId }],\n      });\n    } catch (switchError: unknown) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if ((switchError as { code: number }).code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{ chainId: chainConfig.chainId, chainName: chainConfig.displayName, rpcUrls: [chainConfig.rpcTarget] }],\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n}\n\nexport { MetamaskAdapter };\n"],"names":["constructor","adapterOptions","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","WALLET_ADAPTERS","ADAPTER_STATUS","provider","this","status","Error","init","detectEthereumProvider","mustBeMetaMask","WalletInitializationError","ADAPTER_EVENTS","log","options","setAdapterSettings","connect","chainConfig","getChainConfig","adapter","WalletLoginError","metamaskProvider","request","method","chainId","switchChain","reconnected","rehydrated","disconnect","cleanup","getUserInfo","params","switchError","chainName","rpcUrls"],"sourceRoot":""}