{"version":3,"file":"static/js/780.9fd0c9be.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/phantom-adapter/src/utils.ts","../node_modules/@web3auth/phantom-adapter/src/phantomAdapter.ts"],"sourcesContent":["import type { IPhantomWalletProvider } from \"@web3auth/solana-provider\";\n\nexport function poll(callback: () => boolean | Promise<boolean>, interval: number, count: number): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done)\n          poll(callback, interval, count - 1)\n            .then((res) => {\n              resolve(res);\n              return res;\n            })\n            .catch((err) => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\n\nexport const detectProvider = async (\n  options: { interval: number; count: number } = { interval: 1000, count: 3 }\n): Promise<IPhantomWalletProvider | null> => {\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!(window as any).solana?.isPhantom;\n  if (isPhantomAvailable) {\n    return (window as any).solana;\n  }\n  const isAvailable = await poll(() => (window as any).solana?.isPhantom, options.interval, options.count);\n  if (isAvailable) return (window as any).solana;\n  return null;\n};\n","import {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { IPhantomWalletProvider, PhantomInjectedProvider } from \"@web3auth/solana-provider\";\n\nimport { detectProvider } from \"./utils\";\nexport interface PhantomAdapterOptions {\n  chainConfig?: CustomChainConfig;\n}\n\nexport class PhantomAdapter extends BaseAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.PHANTOM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public _wallet: IPhantomWalletProvider | null = null;\n\n  private phantomProvider: PhantomInjectedProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(options: PhantomAdapterOptions = {}) {\n    super();\n    this.chainConfig = options.chainConfig || null;\n  }\n\n  get isWalletConnected(): boolean {\n    return !!(this._wallet?.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.phantomProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  setAdapterSettings(_: unknown): void {}\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    // set chainConfig for mainnet by default if not set\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n    }\n    this._wallet = await detectProvider({ interval: 500, count: 3 });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig } });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      log.debug(\"initializing phantom adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.PHANTOM });\n\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n        try {\n          await new Promise<SafeEventEmitterProvider | null>((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet as IPhantomWalletProvider);\n              resolve(this.provider);\n            };\n            if (!this._wallet) return reject(WalletInitializationError.notInstalled());\n            this._wallet.once(\"connect\", connect);\n            // Raise an issue on phantom that if window is closed, disconnect event is not fired\n            (this._wallet as IPhantomWalletProvider)._handleDisconnect = (...args: unknown[]) => {\n              reject(WalletInitializationError.windowClosed());\n              return handleDisconnect.apply(this._wallet, args);\n            };\n\n            this._wallet.connect().catch((reason: unknown) => {\n              reject(reason);\n            });\n          });\n        } catch (error: unknown) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError((error as Error)?.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error: unknown) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this._wallet?.disconnect();\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    } catch (error: unknown) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError((error as Error)?.message));\n    }\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async connectWithProvider(injectedProvider: IPhantomWalletProvider): Promise<SafeEventEmitterProvider | null> {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.PHANTOM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    return this.provider;\n  }\n\n  private _onDisconnect = () => {\n    if (this._wallet) {\n      this._wallet.off(\"disconnect\", this._onDisconnect);\n      this.rehydrated = false;\n      // ready to be connected again only if it was previously connected and not cleaned up\n      this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    }\n  };\n}\n"],"names":["poll","callback","interval","count","Promise","setTimeout","done","resolve","res","err","reject","detectProvider","options","window","constructor","WALLET_ADAPTERS","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","ADAPTER_STATUS","ADAPTER_EVENTS","isWalletConnected","isConnected","_wallet","this","status","provider","phantomProvider","Error","setAdapterSettings","init","getChainConfig","WalletInitializationError","config","chainConfig","log","connect","adapter","handleDisconnect","args","reason","error","WalletLoginError","connectWithProvider","disconnect","cleanup","getUserInfo","setupProvider","reconnected","rehydrated"],"sourceRoot":""}