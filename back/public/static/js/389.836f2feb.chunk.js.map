{"version":3,"file":"static/js/389.836f2feb.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/metamask-adapter/src/metamaskAdapter.ts"],"sourcesContent":["import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport interface MetamaskAdapterOptions {\n  chainConfig?: CustomChainConfig;\n}\n\nclass MetamaskAdapter extends BaseAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private rehydrated = false;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  constructor(adapterOptions: MetamaskAdapterOptions = {}) {\n    super();\n    this.chainConfig = adapterOptions.chainConfig || null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(_: unknown): void {}\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    // set default to mainnet\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.switchChain(this.chainConfig as CustomChainConfig);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async switchChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: chainConfig.chainId }],\n      });\n    } catch (switchError: unknown) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if ((switchError as { code: number }).code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{ chainId: chainConfig.chainId, chainName: chainConfig.displayName, rpcUrls: [chainConfig.rpcTarget] }],\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n}\n\nexport { MetamaskAdapter };\n"],"names":["MetamaskAdapter","constructor","adapterOptions","_defineProperty","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","WALLET_ADAPTERS","ADAPTER_STATUS","chainConfig","this","status","metamaskProvider","_","Error","options","detectEthereumProvider","mustBeMetaMask","WalletInitializationError","emit","ADAPTER_EVENTS","log","autoConnect","rehydrated","connect","setAdapterSettings","getChainConfig","adapter","WalletLoginError","request","method","chainId","switchChain","provider","once","disconnect","reconnected","cleanup","removeAllListeners","params","switchError","code","chainName","displayName","rpcUrls","rpcTarget","BaseAdapter"],"sourceRoot":""}